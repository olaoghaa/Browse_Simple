"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("./logger");
const TWILIO_INSTANCE_ID = 'Twilio::RTD::EmsClient::InstanceId';
const TWILIO_ENDPOINT_ID = 'Twilio::RTD::EndpointId';
class PersistentState {
    constructor() {
        this.cachedContinuationToken = null;
        this.myInstanceNumber = this.initializeInstanceId();
    }
    get shouldUsePersistentToken() {
        return this.myInstanceNumber === 0;
    }
    get continuationToken() {
        if (this.cachedContinuationToken) {
            return this.cachedContinuationToken;
        }
        try {
            if (this.shouldUsePersistentToken && sessionStorage) {
                this.cachedContinuationToken = sessionStorage.getItem(TWILIO_ENDPOINT_ID);
                return this.cachedContinuationToken;
            }
        }
        catch (e) {
            logger_1.default.info('Can\'t access persistent storage', e.message);
        }
        return null;
    }
    set continuationToken(continuationToken) {
        this.cachedContinuationToken = continuationToken;
        try {
            if (this.shouldUsePersistentToken && sessionStorage) {
                sessionStorage.setItem(TWILIO_ENDPOINT_ID, continuationToken);
            }
        }
        catch (e) {
            logger_1.default.info('Can\'t access persistent storage', e.message);
        }
    }
    initializeInstanceId() {
        // This method reads session storage in order to detect situation
        // when Chrome's tab clone feature copies session storage
        let cachedInstancesCount = (() => {
            try {
                if (sessionStorage) {
                    return parseInt(sessionStorage.getItem(TWILIO_INSTANCE_ID)) || 0;
                }
            }
            catch (e) {
                return 0;
            }
        })();
        if (cachedInstancesCount > PersistentState.instancesCounter) {
            PersistentState.instancesCounter = cachedInstancesCount;
        }
        let id = PersistentState.instancesCounter++;
        try {
            if (sessionStorage) {
                sessionStorage.setItem(TWILIO_INSTANCE_ID, PersistentState.instancesCounter.toString());
                if (window) {
                    window.addEventListener('beforeunload', () => {
                        sessionStorage.removeItem(TWILIO_INSTANCE_ID);
                    });
                }
            }
        }
        catch (e) { }
        return id;
    }
}
PersistentState.instancesCounter = 0;
exports.PersistentState = PersistentState;
