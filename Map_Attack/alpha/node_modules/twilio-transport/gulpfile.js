const gulp = require('gulp');
const istanbul = require('gulp-istanbul');
const mocha = require('gulp-mocha');
const eslint = require('gulp-eslint');
const runSequence = require('run-sequence');

const pkg = require('./package');

const product = {
  source: {
    dir: 'src',
    name: pkg.name + '.js',
    lib: 'lib/*.js'
  },
  packaged: {
    dir: 'dist',
    name: pkg.name + '.js',
    minified: pkg.name + '.min.js'
  },
  bundled: {
    dir: 'src',
    name: pkg.name + '-bundle.js'
  },
  license: 'LICENSE'
};

const tests = {
  lint: {
    files: [
      'src/*.js',
      'gulpfile.js'
    ]
  },
  unit: {
    files: 'test/unit/**/*.js',
    index: 'test/unit/index.js'
  }
};

const coverage = {
  dir: product.packaged.dir + '/coverage'
};

gulp.task('default', function(done) {
  runSequence(
    'clean',
    'lint',
    'unit-test',
    done
  );
});

gulp.task('jsdoc', function(done) {
  runSequence('generate-jsdoc', 'prettify-jsdoc', done);
});

gulp.task('clean', function() {
});

gulp.task('lint', function() {
  return gulp.src(tests.lint.files)
      .pipe(eslint())
      .pipe(eslint.format())
      .pipe(eslint.failAfterError());
});

gulp.task('istanbul-setup', function() {
  return gulp.src([product.source.lib])
    .pipe(istanbul())
    .pipe(istanbul.hookRequire());
});

gulp.task('unit-test', ['istanbul-setup'], function() {
  return gulp.src(tests.unit.index, { read: false })
    .pipe(mocha({ reporter: 'spec' }))
    .pipe(istanbul.writeReports({
      dir: coverage.dir,
      reporters: ['cobertura', 'lcov', 'text'],
      reportOpts: { dir: coverage.dir }
    }));
});

