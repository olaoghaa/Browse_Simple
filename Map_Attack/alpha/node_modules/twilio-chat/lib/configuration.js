"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BASE_CHAT_URI = 'https://aim.twilio.com';
const TYPING_PATH = '/v1/typing';
const TYPING_TIMEOUT = 5;
const HTTP_CACHE_LIFETIME = 'PT5S';
const CONSUMPTION_HORIZON_SENDING_INTERVAL = 'PT5S';
const USER_INFOS_TO_SUBSCRIBE = 100;
const MINIMUM_RETRY_DELAY = 1000;
const MAXIMUM_RETRY_DELAY = 4000;
const MAXIMUM_ATTEMPTS_COUNT = 3;
const RETRY_WHEN_THROTTLED = true;
class Configuration {
    constructor(token, options) {
        options = options || {};
        this.options = options.Chat || options.IPMessaging || options || {};
        const baseUrl = this.options.apiUri || this.options.typingUri || BASE_CHAT_URI;
        this.token = token;
        this.baseUrl = baseUrl;
    }
    get typingIndicatorUri() { return this.baseUrl + TYPING_PATH; }
    get typingIndicatorTimeoutDefault() { return TYPING_TIMEOUT * 1000; }
    get httpCacheIntervalDefault() { return HTTP_CACHE_LIFETIME; }
    get consumptionReportIntervalDefault() { return CONSUMPTION_HORIZON_SENDING_INTERVAL; }
    get userInfosToSubscribeDefault() { return USER_INFOS_TO_SUBSCRIBE; }
    get backoffConfigDefault() {
        return {
            min: MINIMUM_RETRY_DELAY,
            max: MAXIMUM_RETRY_DELAY,
            maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT
        };
    }
    get backoffConfigOverride() {
        return this.options.backoffConfigOverride;
    }
    get retryWhenThrottledDefault() { return RETRY_WHEN_THROTTLED; }
    get retryWhenThrottledOverride() { return this.options.retryWhenThrottledOverride; }
    get typingIndicatorTimeoutOverride() { return this.options.typingIndicatorTimeoutOverride; }
    get httpCacheIntervalOverride() { return this.options.httpCacheIntervalOverride; }
    get consumptionReportIntervalOverride() { return this.options.consumptionReportIntervalOverride; }
    get userInfosToSubscribeOverride() { return this.options.userInfosToSubscribeOverride; }
    updateToken(token) {
        this.token = token;
    }
}
exports.Configuration = Configuration;
