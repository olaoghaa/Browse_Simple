/// <reference types="node" />
import { EventEmitter } from 'events';
import { Session } from './session';
import { SyncClient } from 'twilio-sync';
export interface UserServices {
    session: Session;
    syncClient: SyncClient;
}
/**
 * @classdesc Extended user information.
 * Note that <code>online</code> and <code>notifiable</code> properties are eligible
 * to use only if reachability function is enabled.
 * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.
 *
 * @property {String} identity - User identity
 * @property {String} friendlyName - User friendly name, null if not set
 * @property {Object} attributes - Object with custom attributes for user
 * @property {Boolean} online - User real-time channel connection status
 * @property {Boolean} notifiable - User push notification registration status
 *
 * @fires User#updated
 * @fires User#userSubscribed
 * @fires User#userUnsubscribed
 *
 * @constructor
 * @param {String} identity - Identity of user
 * @param {String} entityId - id of user's object
 * @param {Object} datasync - datasync service
 * @param {Object} session - session service
 */
declare class User extends EventEmitter {
    private entity;
    private services;
    private state;
    private promiseToFetch;
    private subscribed;
    constructor(identity: string, entityName: string, services: UserServices);
    identity: string;
    entityName: string;
    readonly attributes: Object;
    readonly friendlyName: string;
    readonly online: boolean;
    readonly notifiable: boolean;
    readonly isSubscribed: boolean;
    _update(key: string, value: any): void;
    _updateReachabilityInfo(map: any, update: any): any;
    _fetch(): Promise<User>;
    _ensureFetched(): Promise<User>;
    /**
     * Updates user attributes.
     * @param {Object} attributes - Updated attributes
     * @returns {Promise<User|Error|SessionError>}
     */
    updateAttributes(attributes: any): Promise<this>;
    /**
     * Update Users friendlyName.
     * @param {String} friendlyName - Updated friendlyName
     * @returns {Promise<User|Error|SessionError>}
     */
    updateFriendlyName(friendlyName: any): Promise<this>;
    /**
     * Removes User from subscription list.
     * @returns {Promise<void>} Promise of completion
     */
    unsubscribe(): Promise<void>;
}
declare namespace User {
    type SubscriptionState = 'initializing' | 'subscribed' | 'unsubscribed';
}
export { User };
