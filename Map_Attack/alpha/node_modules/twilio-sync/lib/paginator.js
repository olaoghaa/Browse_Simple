"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @class Paginator
 * @classdesc Pagination helper class.
 *
 * @property {Array} items Array of elements on current page.
 * @property {Boolean} hasNextPage Indicates the existence of next page.
 * @property {Boolean} hasPrevPage Indicates the existence of previous page.
 */
class Paginator {
    /*
    * @constructor
    * @param {Array} items Array of element for current page.
    * @param {Object} params
    * @private
    */
    constructor(items, source, prevToken, nextToken) {
        this.prevToken = prevToken;
        this.nextToken = nextToken;
        this.items = items;
        this.source = source;
    }
    get hasNextPage() { return !!this.nextToken; }
    ;
    get hasPrevPage() { return !!this.prevToken; }
    ;
    /**
     * Request next page.
     * Does not modify existing object.
     * @return {Promise<Paginator>}
     */
    nextPage() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.hasNextPage) {
                throw new Error('No next page');
            }
            return this.source(this.nextToken);
        });
    }
    /**
     * Request previous page.
     * Does not modify existing object.
     * @return {Promise<Paginator>}
     */
    prevPage() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.hasPrevPage) {
                throw new Error('No previous page');
            }
            return this.source(this.prevToken);
        });
    }
}
exports.Paginator = Paginator;
exports.default = Paginator;
