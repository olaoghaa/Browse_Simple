/// <reference types="node" />
import { EventEmitter } from 'events';
import { UserDescriptor } from './userdescriptor';
import { Users } from './data/users';
import { User } from './user';
interface MemberDescriptor {
    identity: string;
    roleSid?: string;
    lastConsumedMessageIndex: number;
    lastConsumptionTimestamp: number;
    userInfo: string;
}
export interface MemberServices {
    users: Users;
}
/**
 * @classdesc A Member represents a remote Client in a Channel.
 * @property {Channel} channel - The Channel the remote Client is a Member of
 * @property {String} identity - The identity of the remote Client
 * @property {Boolean} isTyping - Whether or not this Member is currently typing
 * @property {Number} lastConsumedMessageIndex - Latest consumed Message index by this Member.
 * Note that just retrieving messages on a client endpoint does not mean that messages are consumed/read,
 * please consider reading about [Consumption Horizon feature]{@link https://www.twilio.com/docs/api/chat/guides/consumption-horizon}
 * to find out how to mark messages as consumed.
 * @property {Date} lastConsumptionTimestamp - Date when Member has updated his consumption horizon
 * @property {String} sid - The server-assigned unique identifier for the Member
 * @fires Member#typingEnded
 * @fires Member#typingStarted
 * @fires Member#updated
 */
declare class Member extends EventEmitter {
    private state;
    private services;
    readonly channel: any;
    readonly sid: string;
    readonly identity: string;
    readonly isTyping: boolean;
    readonly lastConsumedMessageIndex: number;
    readonly lastConsumptionTimestamp: Date;
    readonly roleSid: string;
    constructor(services: MemberServices, channel: any, data: MemberDescriptor, sid: string);
    /**
     * Private method used to start or reset the typing indicator timeout (with event emitting)
     * @private
     */
    _startTyping(timeout: any): this;
    /**
     * Private method function used to stop typing indicator (with event emitting)
     * @private
     */
    _endTyping(): void;
    /**
     * Private method function used update local object's property roleSid with new value
     * @private
     */
    _update(data: any): this;
    /**
     * Gets User Descriptor for this member.
     * @returns {Promise<UserDescriptor>}
     */
    getUserDescriptor(): Promise<UserDescriptor>;
    /**
     * Gets User for this member and subscribes to it.
     * @returns {Promise<User>}
     */
    getUser(): Promise<User>;
    /**
     * Remove Member from the Channel.
     * @returns {Promise<void>}
     */
    remove(): any;
}
export { MemberDescriptor, Member };
