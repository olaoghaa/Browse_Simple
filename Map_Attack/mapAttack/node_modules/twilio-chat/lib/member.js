"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
/**
 * @classdesc A Member represents a remote Client in a Channel.
 * @property {Channel} channel - The Channel the remote Client is a Member of
 * @property {String} identity - The identity of the remote Client
 * @property {Boolean} isTyping - Whether or not this Member is currently typing
 * @property {Number} lastConsumedMessageIndex - Latest consumed Message index by this Member.
 * Note that just retrieving messages on a client endpoint does not mean that messages are consumed/read,
 * please consider reading about [Consumption Horizon feature]{@link https://www.twilio.com/docs/api/chat/guides/consumption-horizon}
 * to find out how to mark messages as consumed.
 * @property {Date} lastConsumptionTimestamp - Date when Member has updated his consumption horizon
 * @property {String} sid - The server-assigned unique identifier for the Member
 * @fires Member#typingEnded
 * @fires Member#typingStarted
 * @fires Member#updated
 */
class Member extends events_1.EventEmitter {
    get sid() { return this.state.sid; }
    get identity() { return this.state.identity; }
    get isTyping() { return this.state.isTyping; }
    get lastConsumedMessageIndex() { return this.state.lastConsumedMessageIndex; }
    get lastConsumptionTimestamp() { return this.state.lastConsumptionTimestamp; }
    get roleSid() { return this.state.roleSid; }
    constructor(services, channel, data, sid) {
        super();
        this.channel = channel;
        this.services = services;
        this.state = {
            sid: sid,
            typingTimeout: null,
            isTyping: false,
            identity: data.identity,
            roleSid: data.roleSid || null,
            lastConsumedMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,
            lastConsumptionTimestamp: data.lastConsumptionTimestamp ? new Date(data.lastConsumptionTimestamp) : null,
            userInfo: data.userInfo
        };
        if (!data.identity) {
            throw new Error('Received invalid Member object from server: Missing identity.');
        }
    }
    /**
     * Private method used to start or reset the typing indicator timeout (with event emitting)
     * @private
     */
    _startTyping(timeout) {
        clearTimeout(this.state.typingTimeout);
        this.state.isTyping = true;
        this.emit('typingStarted', this);
        this.channel.emit('typingStarted', this);
        this.state.typingTimeout = setTimeout(() => this._endTyping(), timeout);
        return this;
    }
    /**
     * Private method function used to stop typing indicator (with event emitting)
     * @private
     */
    _endTyping() {
        if (!this.state.typingTimeout) {
            return;
        }
        this.state.isTyping = false;
        this.emit('typingEnded', this);
        this.channel.emit('typingEnded', this);
        clearInterval(this.state.typingTimeout);
        this.state.typingTimeout = null;
    }
    /**
     * Private method function used update local object's property roleSid with new value
     * @private
     */
    _update(data) {
        let updated = false;
        if (data.roleSid && this.state.roleSid !== data.roleSid) {
            this.state.roleSid = data.roleSid;
            updated = true;
        }
        if ((Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null)
            && this.state.lastConsumedMessageIndex !== data.lastConsumedMessageIndex) {
            this.state.lastConsumedMessageIndex = data.lastConsumedMessageIndex;
            updated = true;
        }
        if (data.lastConsumptionTimestamp) {
            let lastConsumptionTimestamp = new Date(data.lastConsumptionTimestamp);
            if (!this.state.lastConsumptionTimestamp ||
                this.state.lastConsumptionTimestamp.getTime() !== lastConsumptionTimestamp.getTime()) {
                this.state.lastConsumptionTimestamp = lastConsumptionTimestamp;
                updated = true;
            }
        }
        if (updated) {
            this.emit('updated', this);
        }
        return this;
    }
    /**
     * Gets User Descriptor for this member.
     * @returns {Promise<UserDescriptor>}
     */
    getUserDescriptor() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.services.users.getUserDescriptor(this.state.identity);
        });
    }
    /**
     * Gets User for this member and subscribes to it.
     * @returns {Promise<User>}
     */
    getUser() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.services.users.getUser(this.state.identity, this.state.userInfo);
        });
    }
    /**
     * Remove Member from the Channel.
     * @returns {Promise<void>}
     */
    remove() {
        return this.channel.removeMember(this);
    }
}
exports.Member = Member;
/**
 * Fired when Member started to type.
 * @event Member#typingStarted
 * @type {Member}
 */
/**
 * Fired when Member ended to type.
 * @event Member#typingEnded
 * @type {Member}
 */
/**
 * Fired when Member's fields has been updated.
 * @event Member#updated
 * @type {Member}
 */
