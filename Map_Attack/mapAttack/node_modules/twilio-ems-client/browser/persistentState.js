"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("./logger");
var TWILIO_INSTANCE_ID = 'Twilio::RTD::EmsClient::InstanceId';
var TWILIO_ENDPOINT_ID = 'Twilio::RTD::EndpointId';

var PersistentState = function () {
    function PersistentState() {
        (0, _classCallCheck3.default)(this, PersistentState);

        this.cachedContinuationToken = null;
        this.myInstanceNumber = this.initializeInstanceId();
    }

    (0, _createClass3.default)(PersistentState, [{
        key: "initializeInstanceId",
        value: function initializeInstanceId() {
            // This method reads session storage in order to detect situation
            // when Chrome's tab clone feature copies session storage
            var cachedInstancesCount = function () {
                try {
                    if (sessionStorage) {
                        return parseInt(sessionStorage.getItem(TWILIO_INSTANCE_ID)) || 0;
                    }
                } catch (e) {
                    return 0;
                }
            }();
            if (cachedInstancesCount > PersistentState.instancesCounter) {
                PersistentState.instancesCounter = cachedInstancesCount;
            }
            var id = PersistentState.instancesCounter++;
            try {
                if (sessionStorage) {
                    sessionStorage.setItem(TWILIO_INSTANCE_ID, PersistentState.instancesCounter.toString());
                    if (window) {
                        window.addEventListener('beforeunload', function () {
                            sessionStorage.removeItem(TWILIO_INSTANCE_ID);
                        });
                    }
                }
            } catch (e) {}
            return id;
        }
    }, {
        key: "shouldUsePersistentToken",
        get: function get() {
            return this.myInstanceNumber === 0;
        }
    }, {
        key: "continuationToken",
        get: function get() {
            if (this.cachedContinuationToken) {
                return this.cachedContinuationToken;
            }
            try {
                if (this.shouldUsePersistentToken && sessionStorage) {
                    this.cachedContinuationToken = sessionStorage.getItem(TWILIO_ENDPOINT_ID);
                    return this.cachedContinuationToken;
                }
            } catch (e) {
                logger_1.default.info('Can\'t access persistent storage', e.message);
            }
            return null;
        },
        set: function set(continuationToken) {
            this.cachedContinuationToken = continuationToken;
            try {
                if (this.shouldUsePersistentToken && sessionStorage) {
                    sessionStorage.setItem(TWILIO_ENDPOINT_ID, continuationToken);
                }
            } catch (e) {
                logger_1.default.info('Can\'t access persistent storage', e.message);
            }
        }
    }]);
    return PersistentState;
}();

PersistentState.instancesCounter = 0;
exports.PersistentState = PersistentState;