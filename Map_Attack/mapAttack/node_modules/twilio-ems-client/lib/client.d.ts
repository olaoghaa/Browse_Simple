/// <reference types="node" />
import { EventEmitter } from 'events';
export interface TokenInfo {
    token: string;
    ttl: number;
    status: string;
    reason: string;
    accountSid: string;
    identity: string;
    serviceSids: Map<string, string>;
}
/**
 * Client for Twilio Endpoint Management service (EMS).
 */
declare class EmsClient extends EventEmitter {
    private config;
    private twilsock;
    private transport;
    private currentFpaToken;
    private currentTokenRequest;
    private state;
    /**
     * @param config Configuration structure
     */
    constructor(config: any);
    /**
     * Set new FPA token
     * @param fpaToken <String> new FPA token to use
     * @return Promise<EMSClient#TokenInfo>
     */
    setToken(fpaToken: string): Promise<TokenInfo>;
    private notifyRejected(request);
    private establishToken(fpaToken);
    private establishTokenImpl(fpaToken);
    private requestRtdToken(fpaToken);
}
/**
 * This structure describes an RTD token
 * @typedef {Object} EMSClient#TokenInfo
 * @property {String} token - RTD token generated for given FPA token
 * @property {Number} ttl - ttl to calculate expiration token time
 * @property {String} status - Indicates did server generated new token or extended existing. Valid values are ['NEW', 'UPDATED'].
 * @property {String} reason - If service issued a new RTD token, this field describes a reason
 */
declare const EMSClient: typeof EmsClient;
export { EmsClient, EMSClient };
export default EMSClient;
