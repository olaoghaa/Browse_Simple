"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var MCS_HOST = 'https://mcs.us1.twilio.com';
var MINIMUM_RETRY_DELAY = 1000;
var MAXIMUM_RETRY_DELAY = 4000;
var MAXIMUM_ATTEMPTS_COUNT = 3;
var RETRY_WHEN_THROTTLED = true;

var Configuration = function () {
    function Configuration(token, baseUrl, options) {
        (0, _classCallCheck3.default)(this, Configuration);

        this.options = options.MCS || options || {};
        this.token = token;
        this.baseUrl = (typeof this.options.realm === 'undefined' ? MCS_HOST : "https://mcs." + this.options.realm + ".twilio.com") + baseUrl;
    }

    (0, _createClass3.default)(Configuration, [{
        key: "updateToken",
        value: function updateToken(token) {
            this.token = token;
        }
    }, {
        key: "backoffConfigOverride",
        get: function get() {
            return this.options.backoffConfigOverride;
        }
    }, {
        key: "retryWhenThrottledOverride",
        get: function get() {
            return this.options.retryWhenThrottledOverride;
        }
    }], [{
        key: "backoffConfigDefault",
        get: function get() {
            return {
                min: MINIMUM_RETRY_DELAY,
                max: MAXIMUM_RETRY_DELAY,
                maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT
            };
        }
    }, {
        key: "retryWhenThrottledDefault",
        get: function get() {
            return RETRY_WHEN_THROTTLED;
        }
    }]);
    return Configuration;
}();

exports.Configuration = Configuration;