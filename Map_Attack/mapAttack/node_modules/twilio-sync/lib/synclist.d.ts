import { SyncEntity, EntityServices, RemovalHandler } from './entity';
import { ListItem as Item } from './listitem';
import { Paginator } from './paginator';
import { Mutator } from './interfaces/mutator';
interface ListServices extends EntityServices {
}
interface ListDescriptor {
    sid: string;
    url: string;
    revision: string;
    last_event_id: number;
    links: any;
    unique_name: string;
    date_updated: Date;
    date_expires: string;
}
export interface ItemMetadata {
    ttl?: number;
}
/**
 * @class
 * @alias List
 * @classdesc Represents a Sync List, which stores an ordered list of values.
 * Use the {@link Client#list} method to obtain a reference to a Sync List.
 * @property {String} sid - List unique id, immutable identifier assigned by the system.
 * @property {String} [uniqueName=null] - List unique name, immutable identifier that can be assigned to list during creation.
 * @property {Date} dateUpdated Date when the List was last updated.
 *
 * @fires List#removed
 * @fires List#itemAdded
 * @fires List#itemRemoved
 * @fires List#itemUpdated
 */
declare class SyncList extends SyncEntity {
    private descriptor;
    private updateMergingQueue;
    private cache;
    private context;
    private contextEventId;
    /**
     * @private
     */
    constructor(services: ListServices, descriptor: ListDescriptor, removalHandler: RemovalHandler);
    readonly uri: string;
    readonly revision: string;
    readonly lastEventId: number;
    readonly links: any;
    readonly dateExpires: string;
    static readonly type: string;
    readonly type: string;
    readonly sid: string;
    readonly uniqueName: string;
    readonly dateUpdated: Date;
    private _addOrUpdateItemOnServer(url, data, ifMatch, ttl);
    /**
     * Add a new item to the list.
     * @param {Object} value Value to be added.
     * @param {List#ItemMetadata} [itemMetadata] Item metadata.
     * @returns {Promise<ListItem>} A newly added item.
     * @public
     * @example
     * list.push({ name: 'John Smith' }, { ttl: 86400 })
     *   .then(function(item) {
     *     console.log('List Item push() successful, item index:' + item.index + ', value: ', item.value)
     *   })
     *   .catch(function(error) {
     *     console.error('List Item push() failed', error);
     *   });
     */
    push(value: any, itemMetadata?: ItemMetadata): Promise<Item>;
    /**
     * Assign new value to an existing item, given its index.
     * @param {Number} index Index of the item to be updated.
     * @param {Object} value New value to be assigned to an item.
     * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.
     * @returns {Promise<ListItem>} A promise with updated item containing latest known value.
     * The promise will be rejected if the item does not exist.
     * @public
     * @example
     * list.set(42, { name: 'John Smith' }, { ttl: 86400 })
     *   .then(function(item) {
     *     console.log('List Item set() successful, item value:', item.value)
     *   })
     *   .catch(function(error) {
     *     console.error('List Item set() failed', error);
     *   });
     */
    set(index: number, value: Object, itemMetadataUpdates?: ItemMetadata): Promise<Item>;
    private _updateItemUnconditionally(index, data, ttl?);
    private _updateItemWithIfMatch(index, mutatorFunction, ttl?);
    /**
     * Modify an existing item by applying a mutation function to it.
     * @param {Number} index Index of an item to be changed.
     * @param {List~Mutator} mutator A function that outputs a new value based on the existing value.
     * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.
     * @returns {Promise<ListItem>} Resolves with the most recent item state, the output of a successful
     *    mutation or a state that prompted graceful cancellation (mutator returned <code>null</code>). This promise
     *    will be rejected if the indicated item does not already exist.
     * @public
     * @example
     * var mutatorFunction = function(currentValue) {
     *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;
     *     return currentValue;
     * };
     * list.mutate(42, mutatorFunction, { ttl: 86400 })
     *   .then(function(item) {
     *     console.log('List Item mutate() successful, new value:', item.value)
     *   })
     *   .catch(function(error) {
     *     console.error('List Item mutate() failed', error);
     *   });
     */
    mutate(index: number, mutator: Mutator, itemMetadataUpdates?: ItemMetadata): Promise<Item>;
    /**
     * Modify an existing item by appending new fields (or overwriting existing ones) with the values from Object.
     * This is equivalent to
     * <pre>
     * list.mutate(42, function(currentValue) {
     *   return Object.assign(currentValue, obj));
     * });
     * </pre>
     * @param {Number} index Index of an item to be changed.
     * @param {Object} obj Set of fields to update.
     * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.
     * @returns {Promise<ListItem>} A promise with a modified item containing latest known value.
     * The promise will be rejected if an item was not found.
     * @public
     * @example
     * // Say, the List Item (index: 42) value is { name: 'John Smith' }
     * list.update(42, { age: 34 }, { ttl: 86400 })
     *   .then(function(item) {
     *     // Now the List Item value is { name: 'John Smith', age: 34 }
     *     console.log('List Item update() successful, new value:', item.value);
     *   })
     *   .catch(function(error) {
     *     console.error('List Item update() failed', error);
     *   });
     */
    update(index: number, obj: Object, itemMetadataUpdates?: ItemMetadata): Promise<Item>;
    /**
     * Delete an item, given its index.
     * @param {Number} index Index of an item to be removed.
     * @returns {Promise<void>} A promise to remove an item.
     * A promise will be rejected if an item was not found.
     * @public
     * @example
     * list.remove(42)
     *   .then(function() {
     *     console.log('List Item remove() successful');
     *   })
     *   .catch(function(error) {
     *     console.error('List Item remove() failed', error);
     *   });
     */
    remove(index: number): Promise<void>;
    /**
     * Retrieve an item by List index.
     * @param {Number} index Item index in a List.
     * @returns {Promise<ListItem>} A promise with an item containing latest known value.
     * A promise will be rejected if an item was not found.
     * @public
     * @example
     * list.get(42)
     *   .then(function(item) {
     *     console.log('List Item get() successful, item value:', item.value)
     *   })
     *   .catch(function(error) {
     *     console.error('List Item get() failed', error);
     *   });
     */
    get(index: number): Promise<Item>;
    private _getItemFromServer(index);
    /**
     * Query items from the List
     * @private
     */
    protected queryItems(arg: any): Promise<Paginator<Item>>;
    /**
     * Query a list of items from collection.
     * @param {Object} [args] Arguments for query
     * @param {Number} [args.from] Item index, which should be used as the offset.
     * If undefined, starts from the beginning or end depending on args.order.
     * @param {Number} [args.pageSize=50] Results page size.
     * @param {'asc'|'desc'} [args.order='asc'] Numeric order of results.
     * @returns {Promise<Paginator<ListItem>>}
     * @public
     * @example
     * var pageHandler = function(paginator) {
     *   paginator.items.forEach(function(item) {
     *     console.log('Item ' + item.index + ': ', item.value);
     *   });
     *   return paginator.hasNextPage ? paginator.nextPage().then(pageHandler)
     *                                : null;
     * };
     * list.getItems({ from: 0, order: 'asc' })
     *   .then(pageHandler)
     *   .catch(function(error) {
     *     console.error('List getItems() failed', error);
     *   });
     */
    getItems(args: any): Promise<Paginator<Item>>;
    /**
     * @return {Promise<Object>} Context of List
     * @private
     */
    getContext(): Promise<Object>;
    /**
     * Update the time-to-live of the list.
     * @param {Number} ttl Specifies the TTL in seconds after which the list is subject to automatic deletion. The value 0 means infinity.
     * @return {Promise<void>} A promise that resolves after the TTL update was successful.
     * @public
     * @example
     * list.setTtl(3600)
     *   .then(function() {
     *     console.log('List setTtl() successful');
     *   })
     *   .catch(function(error) {
     *     console.error('List setTtl() failed', error);
     *   });
     */
    setTtl(ttl: number): Promise<void>;
    /**
     * Update the time-to-live of a list item.
     * @param {Number} index Item index.
     * @param {Number} ttl Specifies the TTL in seconds after which the list item is subject to automatic deletion. The value 0 means infinity.
     * @return {Promise<void>} A promise that resolves after the TTL update was successful.
     * @public
     * @example
     * list.setItemTtl(42, 86400)
     *   .then(function() {
     *     console.log('List setItemTtl() successful');
     *   })
     *   .catch(function(error) {
     *     console.error('List setItemTtl() failed', error);
     *   });
     */
    setItemTtl(index: number, ttl: number): Promise<void>;
    /**
     * Delete this list. It will be impossible to restore it.
     * @return {Promise<void>} A promise that resolves when the list has been deleted.
     * @public
     * @example
     * list.removeList()
     *   .then(function() {
     *     console.log('List removeList() successful');
     *   })
     *   .catch(function(error) {
     *     console.error('List removeList() failed', error);
     *   });
     */
    removeList(): Promise<void>;
    protected onRemoved(locally: boolean): void;
    private shouldIgnoreEvent(key, eventId);
    /**
     * Handle update, which came from the server.
     * @private
     */
    _update(update: any, isStrictlyOrdered: boolean): void;
    _advanceLastEventId(eventId: number, revision?: string): void;
    private _updateRootDateUpdated(dateUpdated);
    private _handleItemMutated(index, uri, lastEventId, revision, value, dateUpdated, dateExpires, added, remote);
    /**
     * @private
     */
    private emitItemMutationEvent(item, remote, added);
    /**
     * @private
     */
    private _handleItemRemoved(index, eventId, oldData, dateUpdated, remote);
    /**
     * @private
     */
    private _handleContextUpdate(data, eventId, dateUpdated);
    /**
     * @private
     */
    private _updateContextIfRequired(data, eventId);
}
export { ListServices, ListDescriptor, Mutator, SyncList };
export default SyncList;
