'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var XHR = typeof XMLHttpRequest === 'undefined' ? require('xmlhttprequest').XMLHttpRequest : XMLHttpRequest;

function parseResponseHeaders(headerString) {
  if (!headerString) {
    return {};
  }

  return headerString.split('\r\n').map(function (el) {
    return el.split(': ');
  }).filter(function (el) {
    return el.length === 2 && el[1].length > 0;
  }).reduce(function (prev, curr) {
    prev[curr[0]] = curr[1];return prev;
  }, {});
}

function extractBody(xhr) {
  var contentType = xhr.getResponseHeader('Content-Type');
  if (!contentType || contentType.indexOf('application/json') !== 0 || xhr.responseText.length === 0) {
    return xhr.responseText;
  }

  try {
    return JSON.parse(xhr.responseText);
  } catch (e) {
    return xhr.responseText;
  }
}

/**
 * Use XMLHttpRequest to get a network resource.
 * @param {String} method - HTTP Method
 * @param {Object} params - Request parameters
 * @param {String} params.url - URL of the resource
 * @param {Array}  params.headers - An array of headers to pass [{ headerName : headerBody }]
 * @param {Object} params.body - A JSON body to send to the resource
 * @returns {Promise}
 **/

var Request = function () {
  function Request() {
    _classCallCheck(this, Request);
  }

  _createClass(Request, null, [{
    key: 'request',
    value: function request(method, params) {
      return new Promise(function (resolve, reject) {
        var xhr = new XHR();
        xhr.open(method, params.url, true);

        xhr.onreadystatechange = function onreadystatechange() {
          if (xhr.readyState !== 4) {
            return;
          }

          var headers = parseResponseHeaders(xhr.getAllResponseHeaders());
          var body = extractBody(xhr);

          if (200 <= xhr.status && xhr.status < 300) {
            resolve({ status: xhr.status, headers: headers, body: body });
          } else {
            reject({ status: xhr.status, description: xhr.statusText, headers: headers, body: body });
          }
        };

        for (var headerName in params.headers) {
          xhr.setRequestHeader(headerName, params.headers[headerName]);
          if (headerName === 'Content-Type' && params.headers[headerName] === 'application/json') {
            params.body = JSON.stringify(params.body);
          }
        }

        xhr.send(params.body);
      });
    }

    /**
     * Sugar function for request('GET', params);
     * @param {Object} params - Request parameters
     * @returns {Promise}
     */

  }, {
    key: 'get',
    value: function get(params) {
      return this.request('GET', params);
    }

    /**
     * Sugar function for request('POST', params);
     * @param {Object} params - Request parameters
     * @returns {Promise}
     */

  }, {
    key: 'post',
    value: function post(params) {
      return this.request('POST', params);
    }

    /**
     * Sugar function for request('PUT', params);
     * @param {Object} params - Request parameters
     * @returns {Promise}
     */

  }, {
    key: 'put',
    value: function put(params) {
      return this.request('PUT', params);
    }

    /**
     * Sugar function for request('DELETE', params);
     * @param {Object} params - Request parameters
     * @returns {Promise}
     */

  }, {
    key: 'delete',
    value: function _delete(params) {
      return this.request('DELETE', params);
    }
  }]);

  return Request;
}();

exports.default = Request;


module.exports = Request;
module.exports = exports['default'];